#!/usr/bin/env bash
# bootstrap - Install terminal utilities across platforms  
# Usage: ./bin/bootstrap [--dry-run]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Parse arguments
DRY_RUN=false
while [[ $# -gt 0 ]]; do
  case "$1" in
    --dry-run)
      DRY_RUN=true
      shift
      ;;
    *)
      log_error "Unknown option: $1"
      echo "Usage: $0 [--dry-run]"
      exit 1
      ;;
  esac
done

# Platform detection
detect_platform() {
  local os=$(uname -s)
  
  case "$os" in
    Darwin)
      echo "macos"
      ;;
    Linux)
      if [[ -f /etc/os-release ]]; then
        source /etc/os-release
        case "$ID" in
          arch|manjaro)
            echo "arch"
            ;;
          ubuntu|debian)
            echo "debian"
            ;;
          *)
            log_error "Unsupported Linux distribution: $ID"
            exit 1
            ;;
        esac
      else
        log_error "Cannot detect Linux distribution"
        exit 1
      fi
      ;;
    *)
      log_error "Unsupported operating system: $os"
      exit 1
      ;;
  esac
}

# Get packages for platform
get_packages() {
  local platform="$1"
  case "$platform" in
    macos)
      # All packages available via homebrew
      echo "git curl wget tmux zsh unzip jq stow bat eza ripgrep fd git-delta fzf starship zoxide neovim gh lazygit yazi"
      ;;
    arch)
      # github-cli is 'github-cli' not 'gh' in AUR
      echo "git curl wget tmux zsh unzip jq stow bat eza ripgrep fd git-delta fzf starship zoxide neovim github-cli lazygit yazi"
      ;;
    debian)
      # Some packages have different names: exa instead of eza, fd-find instead of fd
      # starship, zoxide, yazi need special handling
      echo "git curl wget tmux zsh unzip jq stow bat exa ripgrep fd-find git-delta-musl fzf neovim gh lazygit"
      ;;
  esac
}

# Get package manager command for platform
get_pkg_manager() {
  local platform="$1"
  case "$platform" in
    macos)
      echo "brew install"
      ;;
    arch)
      echo "sudo pacman -S --noconfirm"
      ;;
    debian)
      echo "sudo apt install -y"
      ;;
  esac
}

# Check if package manager is available
check_package_manager() {
  local platform="$1"
  
  case "$platform" in
    macos)
      if ! command -v brew &> /dev/null; then
        log_warning "Homebrew not found. Installing..."
        if [[ "$DRY_RUN" == "true" ]]; then
          log_info "Would install Homebrew"
        else
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          log_success "Homebrew installed"
        fi
      else
        log_info "Homebrew found"
      fi
      ;;
    arch)
      if ! command -v pacman &> /dev/null; then
        log_error "pacman not found. Are you on Arch Linux?"
        exit 1
      fi
      ;;
    debian)
      if ! command -v apt &> /dev/null; then
        log_error "apt not found. Are you on Debian/Ubuntu?"
        exit 1
      fi
      # Update package list
      if [[ "$DRY_RUN" == "true" ]]; then
        log_info "Would update package list with: sudo apt update"
      else
        log_info "Updating package list..."
        sudo apt update
      fi
      ;;
  esac
}

# Install packages
install_packages() {
  local platform="$1"
  local packages=$(get_packages "$platform")
  local install_cmd=$(get_pkg_manager "$platform")
  
  log_info "Installing packages for $platform: $packages"
  
  if [[ "$DRY_RUN" == "true" ]]; then
    log_info "Would run: $install_cmd $packages"
  else
    # Special handling for Debian packages that need different treatment
    if [[ "$platform" == "debian" ]]; then
      # Install packages that are available
      for pkg in $packages; do
        case "$pkg" in
          starship)
            log_info "Installing starship via curl..."
            curl -sS https://starship.rs/install.sh | sh -s -- --yes
            ;;
          zoxide)
            log_info "Installing zoxide via curl..."
            curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
            ;;
          yazi)
            log_warning "yazi not available in apt, skipping (install manually with cargo)"
            ;;
          *)
            $install_cmd "$pkg" || log_warning "Failed to install $pkg, continuing..."
            ;;
        esac
      done
    else
      # For macOS and Arch, install all at once
      $install_cmd $packages
    fi
    log_success "Package installation complete"
  fi
}

# Main execution
main() {
  log_info "Terminal Utilities Bootstrap"
  
  if [[ "$DRY_RUN" == "true" ]]; then
    log_info "DRY RUN MODE - No changes will be made"
  fi
  
  # Detect platform
  local platform=$(detect_platform)
  log_info "Detected platform: $platform"
  
  # Check package manager
  check_package_manager "$platform"
  
  # Install packages
  install_packages "$platform"
  
  if [[ "$DRY_RUN" == "true" ]]; then
    log_info "Dry run complete. No changes were made."
  else
    log_success "Bootstrap complete! Terminal utilities installed for $platform"
    log_info "You may need to restart your shell or run 'source ~/.zshrc' to use new tools"
  fi
}

# Run main function
main "$@"